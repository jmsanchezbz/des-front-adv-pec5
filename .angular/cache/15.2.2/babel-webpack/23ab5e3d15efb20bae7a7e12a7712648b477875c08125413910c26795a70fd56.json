{"ast":null,"code":"import { TestBed } from \"@angular/core/testing\";\nimport { CategoryService } from \"./category.service\";\nimport { HttpClientTestingModule, HttpTestingController } from \"@angular/common/http/testing\";\nimport { CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from \"@angular/core\";\nconst categoriesList = [{\n  userId: \"\",\n  categoryId: \"1\",\n  css_color: \"\",\n  description: \"\",\n  title: \"\"\n}, {\n  userId: \"\",\n  categoryId: \"2\",\n  css_color: \"\",\n  description: \"\",\n  title: \"\"\n}, {\n  userId: \"\",\n  categoryId: \"3\",\n  css_color: \"\",\n  description: \"\",\n  title: \"\"\n}];\ndescribe(\"CategoryService\", () => {\n  let service;\n  let httpMock;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [CategoryService],\n      schemas: [CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA]\n    });\n  });\n  beforeEach(() => {\n    service = TestBed.inject(CategoryService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n  it(\"should be creared\", () => {\n    expect(service).toBeTruthy();\n  });\n  it(\"GET method and getCategoriesByUserId return a list of categories\", () => {\n    service.getCategoriesByUserId('1').subscribe(resp => {});\n  });\n});","map":{"version":3,"names":["TestBed","CategoryService","HttpClientTestingModule","HttpTestingController","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA","categoriesList","userId","categoryId","css_color","description","title","describe","service","httpMock","beforeEach","configureTestingModule","imports","providers","schemas","inject","it","expect","toBeTruthy","getCategoriesByUserId","subscribe","resp"],"sources":["/home/jose/workspace/uoc/des-front-adv/pec4/sol-pec2-obs-blog-uoc-project-front/src/app/Services/category.service.spec.ts"],"sourcesContent":["import { TestBed } from \"@angular/core/testing\";\nimport { CategoryService } from \"./category.service\";\nimport {\n  HttpClientTestingModule,\n  HttpTestingController,\n} from \"@angular/common/http/testing\";\nimport { CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from \"@angular/core\";\nimport { CategoryDTO } from \"../Models/category.dto\";\n\nconst categoriesList: CategoryDTO[] = [\n  {\n    userId: \"\",\n    categoryId: \"1\",\n    css_color: \"\",\n    description: \"\",\n    title: \"\",\n  },\n  {\n    userId: \"\",\n    categoryId: \"2\",\n    css_color: \"\",\n    description: \"\",\n    title: \"\",\n  },\n  {\n    userId: \"\",\n    categoryId: \"3\",\n    css_color: \"\",\n    description: \"\",\n    title: \"\",\n  },\n];\n\ndescribe(\"CategoryService\", () => {\n  let service: CategoryService;\n  let httpMock: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [CategoryService],\n      schemas: [CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA],\n    });\n  });\n\n  beforeEach(() => {\n    service = TestBed.inject(CategoryService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  it(\"should be creared\", () => {\n    expect(service).toBeTruthy();\n  });\n\n  it(\"GET method and getCategoriesByUserId return a list of categories\", () => {\n    service.getCategoriesByUserId('1').subscribe((resp:CategoryDTO[]) =>{\n\n    })\n  });\n});\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,eAAe,QAAQ,oBAAoB;AACpD,SACEC,uBAAuB,EACvBC,qBAAqB,QAChB,8BAA8B;AACrC,SAASC,sBAAsB,EAAEC,gBAAgB,QAAQ,eAAe;AAGxE,MAAMC,cAAc,GAAkB,CACpC;EACEC,MAAM,EAAE,EAAE;EACVC,UAAU,EAAE,GAAG;EACfC,SAAS,EAAE,EAAE;EACbC,WAAW,EAAE,EAAE;EACfC,KAAK,EAAE;CACR,EACD;EACEJ,MAAM,EAAE,EAAE;EACVC,UAAU,EAAE,GAAG;EACfC,SAAS,EAAE,EAAE;EACbC,WAAW,EAAE,EAAE;EACfC,KAAK,EAAE;CACR,EACD;EACEJ,MAAM,EAAE,EAAE;EACVC,UAAU,EAAE,GAAG;EACfC,SAAS,EAAE,EAAE;EACbC,WAAW,EAAE,EAAE;EACfC,KAAK,EAAE;CACR,CACF;AAEDC,QAAQ,CAAC,iBAAiB,EAAE,MAAK;EAC/B,IAAIC,OAAwB;EAC5B,IAAIC,QAA+B;EAEnCC,UAAU,CAAC,MAAK;IACdf,OAAO,CAACgB,sBAAsB,CAAC;MAC7BC,OAAO,EAAE,CAACf,uBAAuB,CAAC;MAClCgB,SAAS,EAAE,CAACjB,eAAe,CAAC;MAC5BkB,OAAO,EAAE,CAACf,sBAAsB,EAAEC,gBAAgB;KACnD,CAAC;EACJ,CAAC,CAAC;EAEFU,UAAU,CAAC,MAAK;IACdF,OAAO,GAAGb,OAAO,CAACoB,MAAM,CAACnB,eAAe,CAAC;IACzCa,QAAQ,GAAGd,OAAO,CAACoB,MAAM,CAACjB,qBAAqB,CAAC;EAClD,CAAC,CAAC;EAEFkB,EAAE,CAAC,mBAAmB,EAAE,MAAK;IAC3BC,MAAM,CAACT,OAAO,CAAC,CAACU,UAAU,EAAE;EAC9B,CAAC,CAAC;EAEFF,EAAE,CAAC,kEAAkE,EAAE,MAAK;IAC1ER,OAAO,CAACW,qBAAqB,CAAC,GAAG,CAAC,CAACC,SAAS,CAAEC,IAAkB,IAAI,CAEpE,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}