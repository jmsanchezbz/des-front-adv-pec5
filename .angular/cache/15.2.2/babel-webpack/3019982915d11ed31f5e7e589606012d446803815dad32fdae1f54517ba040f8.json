{"ast":null,"code":"import { TestBed } from \"@angular/core/testing\";\nimport { CategoryService } from \"./category.service\";\nimport { HttpClientTestingModule, HttpTestingController } from \"@angular/common/http/testing\";\nimport { CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from \"@angular/core\";\nconst categoryAdd = {\n  userId: \"edf0b16c-f07d-4532-9315-93725e155bba\",\n  css_color: \"#aabbcc\",\n  description: \"description\",\n  title: \"title\"\n};\nconst categoriesList = [{\n  userId: \"\",\n  categoryId: \"1\",\n  css_color: \"\",\n  description: \"description\",\n  title: \"title\"\n}, {\n  userId: \"\",\n  categoryId: \"2\",\n  css_color: \"\",\n  description: \"\",\n  title: \"\"\n}, {\n  userId: \"\",\n  categoryId: \"3\",\n  css_color: \"\",\n  description: \"\",\n  title: \"\"\n}];\ndescribe(\"CategoryService\", () => {\n  let service;\n  let httpMock;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [CategoryService],\n      schemas: [CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA]\n    });\n  });\n  beforeEach(() => {\n    service = TestBed.inject(CategoryService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n  it(\"should be creared\", () => {\n    expect(service).toBeTruthy();\n  });\n  it(\"GET method and getCategoriesByUserId return a list of categories\", () => {\n    service.getCategoriesByUserId(\"1\").subscribe(resp => {\n      expect(resp).toEqual(categoriesList);\n    });\n    const req = httpMock.expectOne(\"http://localhost:3000/users/categories/1\");\n    expect(req.request.method).toBe(\"GET\");\n    req.flush(categoriesList);\n  });\n  it(\"GET method and createCategory return a category\", () => {\n    let categoryAdd = {\n      ...categoriesList[0],\n      categoryId: undefined\n    };\n    service.createCategory(categoriesList[0]).subscribe(resp => {\n      let id;\n      let obj;\n      expect(resp.categoryId).toBeTruthy();\n    });\n    const req = httpMock.expectOne(\"http://localhost:3000/users/categories\");\n    expect(req.request.method).toBe(\"POST\");\n    const mockCategoryResponse = {\n      ...categoryAdd,\n      categoryId: \"newCategoryId\"\n    };\n    req.flush(mockCategoryResponse);\n  });\n});","map":{"version":3,"names":["TestBed","CategoryService","HttpClientTestingModule","HttpTestingController","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA","categoryAdd","userId","css_color","description","title","categoriesList","categoryId","describe","service","httpMock","beforeEach","configureTestingModule","imports","providers","schemas","inject","it","expect","toBeTruthy","getCategoriesByUserId","subscribe","resp","toEqual","req","expectOne","request","method","toBe","flush","undefined","createCategory","id","obj","mockCategoryResponse"],"sources":["/home/jose/workspace/uoc/des-front-adv/pec4/sol-pec2-obs-blog-uoc-project-front/src/app/Services/category.service.spec.ts"],"sourcesContent":["import { TestBed } from \"@angular/core/testing\";\nimport { CategoryService } from \"./category.service\";\nimport {\n  HttpClientTestingModule,\n  HttpTestingController,\n} from \"@angular/common/http/testing\";\nimport { CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from \"@angular/core\";\nimport { CategoryDTO } from \"../Models/category.dto\";\n\nconst categoryAdd = {\n    userId: \"edf0b16c-f07d-4532-9315-93725e155bba\",\n    css_color: \"#aabbcc\",\n    description: \"description\",\n    title: \"title\",\n  }\n\nconst categoriesList: CategoryDTO[] = [\n  {\n    userId: \"\",\n    categoryId: \"1\",\n    css_color: \"\",\n    description: \"description\",\n    title: \"title\",\n  },\n  {\n    userId: \"\",\n    categoryId: \"2\",\n    css_color: \"\",\n    description: \"\",\n    title: \"\",\n  },\n  {\n    userId: \"\",\n    categoryId: \"3\",\n    css_color: \"\",\n    description: \"\",\n    title: \"\",\n  },\n];\n\ndescribe(\"CategoryService\", () => {\n  let service: CategoryService;\n  let httpMock: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [CategoryService],\n      schemas: [CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA],\n    });\n  });\n\n  beforeEach(() => {\n    service = TestBed.inject(CategoryService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  it(\"should be creared\", () => {\n    expect(service).toBeTruthy();\n  });\n\n  it(\"GET method and getCategoriesByUserId return a list of categories\", () => {\n    service.getCategoriesByUserId(\"1\").subscribe((resp: CategoryDTO[]) => {\n      expect(resp).toEqual(categoriesList);\n    });\n\n    const req = httpMock.expectOne(\"http://localhost:3000/users/categories/1\");\n\n    expect(req.request.method).toBe(\"GET\");\n\n    req.flush(categoriesList);\n  });\n\n  it(\"GET method and createCategory return a category\", () => {\n    let categoryAdd = { ...categoriesList[0], categoryId:undefined };\n\n    service.createCategory(categoriesList[0]).subscribe((resp: CategoryDTO) => {\n        let id;\n        let obj;\n      expect(resp.categoryId).toBeTruthy();\n\n    });\n\n    const req = httpMock.expectOne(\"http://localhost:3000/users/categories\");\n\n    expect(req.request.method).toBe(\"POST\");\n\n    const mockCategoryResponse: CategoryDTO = {\n        ...categoryAdd,\n        categoryId: \"newCategoryId\"\n    }\n\n    req.flush(mockCategoryResponse);\n  });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}